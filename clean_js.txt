{% block extra_js %}
<script>
document.addEventListener('DOMContentLoaded', function() {
    // Real category data from Django template
    const categoryData = {
        {% for category in categories %}
        "{{ category.name }}": {
            subcategories: [
                {% for subcategory in category.subcategories.all %}
                {
                    name: "{{ subcategory.name }}",
                    products: [
                        {% for product in subcategory.products.all %}
                        {
                            id: {{ product.id }},
                            name: "{{ product.name|escapejs }}",
                            description: "{{ product.description|escapejs }}",
                            price: {{ product.price }},
                            stock: {{ product.stock }}
                        }{% if not forloop.last %},{% endif %}
                        {% empty %}
                        {% endfor %}
                    ]
                }{% if not forloop.last %},{% endif %}
                {% empty %}
                {% endfor %}
            ]
        }{% if not forloop.last %},{% endif %}
        {% empty %}
        {% endfor %}
    };

    // Handle category card clicks
    document.querySelectorAll('.category-card').forEach(card => {
        card.addEventListener('click', function() {
            const categoryName = this.getAttribute('data-category-name');
            
            // Update modal title
            document.getElementById('categoryModalLabel').textContent = categoryName + ' Menu';

            // Get containers
            const tabsContainer = document.getElementById('subcategoryTabs');
            const contentContainer = document.getElementById('subcategoryTabContent');
            
            // Clear existing content
            tabsContainer.innerHTML = '';
            contentContainer.innerHTML = '';

            // Get category data
            const catData = categoryData[categoryName];
            if (!catData) return;

            // Create tabs and content
            catData.subcategories.forEach((subcategory, index) => {
                const isActive = index === 0;
                const contentId = `content-${categoryName}-${index}`;
                
                // Create tab
                const tab = document.createElement('li');
                tab.className = 'nav-item';
                tab.innerHTML = `
                    <button class="nav-link ${isActive ? 'active' : ''}" 
                            data-bs-toggle="tab" 
                            data-bs-target="#${contentId}" 
                            type="button">
                        <i class="bi bi-list-ul me-1"></i>${subcategory.name}
                    </button>
                `;
                tabsContainer.appendChild(tab);

                // Create content
                const content = document.createElement('div');
                content.className = `tab-pane fade ${isActive ? 'show active' : ''}`;
                content.id = contentId;
                content.innerHTML = `
                    <div class="p-4">
                        <h5>${subcategory.name}</h5>
                        <div class="row">
                            ${subcategory.products.map((product, productIndex) => {
                                const productId = product.id;
                                const modalProductId = `modal-${categoryName}-${index}-${productIndex}`;
                                return `
                                <div class="col-md-4 mb-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <h6 class="card-title">${product.name}</h6>
                                            <p class="card-text">${product.description}</p>
                                            <div class="d-flex justify-content-between align-items-center mb-3">
                                                <span class="h6 mb-0">$${product.price}</span>
                                                <small class="text-muted">Stock: ${product.stock}</small>
                                            </div>
                                            <div class="d-flex justify-content-between align-items-center">
                                                <div class="quantity-controls d-flex align-items-center">
                                                    <button class="btn btn-outline-secondary btn-sm qty-btn" onclick="changeModalQuantity('${modalProductId}', -1)">
                                                        <i class="bi bi-dash"></i>
                                                    </button>
                                                    <input type="number" id="qty-${modalProductId}" class="form-control mx-2 text-center" 
                                                           value="1" min="1" max="${product.stock}" style="width: 60px;">
                                                    <button class="btn btn-outline-secondary btn-sm qty-btn" onclick="changeModalQuantity('${modalProductId}', 1)">
                                                        <i class="bi bi-plus"></i>
                                                    </button>
                                                </div>
                                                <button class="btn btn-primary btn-sm" onclick="addModalToCart(${productId}, '${modalProductId}', '${product.name}')">
                                                    <i class="bi bi-cart-plus me-1"></i>Add to Cart
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                                `;
                            }).join('')}
                        </div>
                    </div>
                `;
                contentContainer.appendChild(content);
            });
        });
    });

    // Initialize cart count in tabs
    const tabCartCountElement = document.getElementById('tab-cart-count');
    if (tabCartCountElement) {
        tabCartCountElement.textContent = '{{ cart_count|default:0 }}';
    }
});

// Modal cart functions
function changeModalQuantity(modalProductId, change) {
    const qtyInput = document.getElementById(`qty-${modalProductId}`);
    let currentQty = parseInt(qtyInput.value);
    let newQty = currentQty + change;
    const maxStock = parseInt(qtyInput.max);

    // Keep quantity between 1 and stock limit
    if (newQty < 1) newQty = 1;
    if (newQty > maxStock) newQty = maxStock;

    qtyInput.value = newQty;
}

function addModalToCart(productId, modalProductId, productName) {
    const qtyInput = document.getElementById(`qty-${modalProductId}`);
    const quantity = parseInt(qtyInput.value);
    
    // Disable button and show loading
    const button = event.target;
    const originalHTML = button.innerHTML;
    button.disabled = true;
    button.innerHTML = '<i class="bi bi-arrow-repeat spin"></i> Adding...';
    
    // Send AJAX request to real cart system
    fetch('{% url "orders:add_to_cart" %}', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
            'X-CSRFToken': document.querySelector('[name=csrfmiddlewaretoken]').value
        },
        body: JSON.stringify({
            product_id: productId,
            quantity: quantity
        })
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            // Update cart count in navigation
            const cartCountElement = document.getElementById('cart-count');
            const tabCartCountElement = document.getElementById('tab-cart-count');
            
            if (cartCountElement) {
                cartCountElement.textContent = data.cart_count;
            }
            if (tabCartCountElement) {
                tabCartCountElement.textContent = data.cart_count;
            }

            // Show success message
            showAlert(`${productName} added to cart successfully!`, 'success');

            // Reset quantity to 1
            qtyInput.value = 1;
        } else {
            showAlert(data.message || 'Failed to add to cart', 'danger');
        }
    })
    .catch(error => {
        console.error('Error:', error);
        showAlert('An error occurred while adding to cart.', 'danger');
    })
    .finally(() => {
        // Re-enable button
        button.disabled = false;
        button.innerHTML = originalHTML;
    });
}

function showAlert(message, type) {
    const alertDiv = document.createElement('div');
    alertDiv.className = `alert alert-${type} alert-dismissible fade show position-fixed`;
    alertDiv.style.cssText = 'top: 100px; right: 20px; z-index: 9999; min-width: 300px; max-width: 400px;';
    alertDiv.innerHTML = `
        <div class="d-flex align-items-center">
            <i class="bi bi-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
            <span>${message}</span>
        </div>
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    `;

    document.body.appendChild(alertDiv);

    // Auto remove after 4 seconds
    setTimeout(() => {
        if (alertDiv.parentNode) {
            alertDiv.remove();
        }
    }, 4000);
}

// Add loading animation style
const style = document.createElement('style');
style.textContent = `
    @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }
    .spin {
        animation: spin 1s linear infinite;
    }
`;
document.head.appendChild(style);
</script>
{% endblock %}